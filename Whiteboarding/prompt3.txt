#3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"
Output: "3ab2c4da"


// takes a string with repeated characters and compresses them
// use a number to show how many times the repeated character has been compressed

// EXAMPLE:
  // Input: "aaabccdddda"
  // Output: "3ab2c4da"

// Questions:
  // javascript?
  // special character?
  // always string?


// Psedocoding:
   // add loop to check for repeated characters
   // need letter count & output string
   // compare each index character to next index character
   //  if equal: add to letter count  / else:  add number & letter to output string
   //  reset letter count to check for next block of characters
   //  return compressing string

urn URL string


// without recursion
      function compressString(string){
        let input= string.split("");
        
        let arrayNew=[];
        
        for( let i=0;i< input.length ;i++){
          let num=1;
          for(let j=i+1 ; j< input.length ;j++){
            if(input[i]==input[j]){
              num++;
              }
            } 
          if(!arrayNew.includes(input[i])){
          arrayNew.push(num);
          arrayNew.push(input[i]); 
          }
        }
        return arrayNew.join("");
      }

    // TEST:
      // > compressString("aaabccdddda");
      // < "4ab2c4d"

// without recursion

      function compressString(string) {
        let letterCount = 1;                  // each letter occurs at least 1
        let outputString = "";                // empty output string to return

        for (let i = 0; i < string.length; i++) {
          if (string[i] === string[i + 1]) {   // if current i is = to next i then +1
            letterCount++;

          } else {                            // else current index is not equal to next index
            if (letterCount === 1) {          // letterCount = 1 then add index to outputString
              outputString += string[i];

            } else {                          // add letterCount to the string index & add to outputString
              outputString += letterCount + string[i]
            }
            letterCount = 1;                  // reset letterletterCount fo next time
          }
        }
        return outputString;                 // return outputString
      }
    
    // TEST:
      //  > compressString("aaabccdddda");
      //  < '3ab2c4da'




// with recursion

        const compressStringRecurse = (string) => {
          if (string.length === 0) return string;
          let letterCount = 1;

          for (let i = 0; string[i] === string[i+1]; i++) letterCount++;
          if (letterCount > 1) {
            return letterCount.toString() + string[0] + compressStringRecurse(string.substring(letterCount));
          } else {
            return string[0] + compressStringRecurse(string.substring(1));
          }
        };

      // TEST:
        // >  compressStringRecurse("aaabccdddda");
        // <  '3ab2c4da'
   